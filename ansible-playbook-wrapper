#!/bin/bash

#################
# CONFIGURATION #
#################

# set defaults for variables
timeout=30
inventoryFileName="hosts"
vaultPasswordFile="/tmp/vault-password-file-$(date +%s%N).txt"
ansibleCommand="ansible-playbook"
galaxyRolesFileName="requirements.yml"
galaxyRolesInstall="false"

# disable host key checking and DNS spoofing warnings
export ANSIBLE_SSH_ARGS="-C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"


#############
# FUNCTIONS #
#############

# --------------------------------------------------------
# Function for creating log entries on the console
# --------------------------------------------------------
# $1 - Log level
# $2 - Log text
# --------------------------------------------------------
function log() {

    # read parameters
    local level="$1"
    local text="$2"

    # create log message
    local now=$(date +"%d-%m-%Y %H:%M:%S")
    echo -e "\n$now [$level] $text\n"
}

# ---------------------------------------------------------------
# Function for printing the usage of this script
# ---------------------------------------------------------------
function usage() {

    # print help text
    cat <<USAGE
Usage:
  $scriptName [Options] <Args>

Required options:
  -p <playbook file>    Playbook file to use

Not required options:   
  -d                    Perform dry run
  -g                    Install galaxy roles from $galaxyRolesFileName file
  -h                    Show this help text
  -i <inventory file>   Inventory file to use
  -k <private key>      Private key to use for the SSH connection
  -l <host>             Limit to specified host
  -r                    Retry execution for failed hosts
  -s <sudo password>    SUDO password to use
  -t <task name>        Start at task with specified name
  -v <vault password>	Vault password to use

Example:
  $scriptName -p my-playbook.yml -s my-sudo-password -v my-vault-password -l my-single-host

USAGE

    # exit with error
    exit -1
}


##########
# SCRIPT #
##########

# echo script banner
echo ""
echo "############################"
echo "# Ansible Playbook Wrapper #"
echo "############################"
echo ""

# get script folder
scriptPath="$(readlink -f $0)"
scriptFolder="$(dirname $scriptPath)"
scriptName="$(basename $scriptPath)"

# get command line args
while getopts dghi:k:l:p:rs:t:v: opt
do
    case $opt in
        d)
            ansibleCommand="$ansibleCommand --check"
        ;;
        g)
            galaxyRolesInstall="true"
        ;;
        h)
            usage
            exit -1
        ;;
        i)
            inventoryFilePath="$OPTARG"
        ;;
        k)
            privateKey="$OPTARG"
            ansibleCommand="$ansibleCommand --private-key=$privateKey"
        ;;
        l)
            if [ "$OPTARG" != "all" ]
            then
                ansibleCommand="$ansibleCommand --limit '$OPTARG'"
            fi    
        ;;
        p)
            playbookFilePath="$OPTARG"
        ;;
        r)
            playbookName="$(echo $(basename $playbookFilePath) | awk -F "." '{print $1}')"
            ansibleCommand="$ansibleCommand --limit '@${scriptFolder}/${playbookName}.retry'"
        ;;
        s)
            sudoPassword="$OPTARG"
        ;;   
        t)
            ansibleCommand="$ansibleCommand --start-at-task='$OPTARG'"
        ;;   
        v)
            vaultPassword="$OPTARG"
	    ;; 
        \?)
            log "ERROR" "Invalid option: -$OPTARG"
            exit -1
        ;;
    esac
done

# check command line args
if [ "$playbookFilePath" == "" ]
then 
    # print usage
    usage
fi

# get playbook file variables
playbookFolderPath="$(dirname $playbookFilePath)"
playbookFileName="$(basename $playbookFilePath)"

# should galaxy roles be installed?
if [ "$galaxyRolesInstall" == "true" ]
then
    # get galaxy roles file path
    galaxyRolesFilePath="$(find $playbookFolderPath -name $galaxyRolesFileName -type f)"

    # install galaxy roles
    log "INFO" "Installing Ansible Galaxy roles from file '$galaxyRolesFileName'"
    ansible-galaxy install -c -r "$galaxyRolesFilePath"
fi

# search for inventory file if not specified
if [ "$inventoryFilePath" == ""  ]
then
    # get inventory file path
    inventoryFilePath="$(find $playbookFolderPath -name $inventoryFileName -type f)"

    # check if inventory file was not found
    if [ "$inventoryFilePath" == "" ]
    then
        # print usage
        usage
    fi
fi

# read sudo password from command line
if [ "$sudoPassword" == "" ]
then 
    read -s -p "SUDO Password: " sudoPassword
    echo ""
fi    

# read vault password from command line
if [ "$vaultPassword" == "" ]
then 
    read -s -p "Vault Password: " vaultPassword
    echo ""
fi

# create vault password file
echo "$vaultPassword" > "$vaultPasswordFile"

# build ansible playbook
ansibleCommand="$ansibleCommand -i '$inventoryFilePath' --timeout '$timeout' --vault-password-file '$vaultPasswordFile' --extra-vars ansible_sudo_pass='$sudoPassword' --extra-vars ansible_ssh_pass='$sudoPassword' --extra-vars ansible_python_interpreter=/usr/bin/python3 '$playbookFilePath'"

# execute ansible playbook
log "INFO" "Executing Ansible playbook from file '$playbookFileName'"
eval $ansibleCommand

# remove vault password file
rm -f "$vaultPasswordFile"